{"ast":null,"code":"var _jsxFileName = \"/home/julio/ReactProjects/assignment03-film-project-p1/src/FilmLibrary.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport FilmDetail from \"./FilmDetail\";\nimport './FilmLibrary.css';\nimport FilmRow from \"./FilmRow\";\nimport TMDB from \"./TMDB\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FilmLibrary() {\n  _s();\n\n  const [selectedFilm, setSelectedFilm] = useState(TMDB.films[0]);\n  const [favFilms, setFavFilms] = useState([]);\n  const [selectAllView, setSelectAllView] = useState(true);\n\n  const handleAddOrRemoveFavFilm = (idAddOrRemove, indexAddOrRemove) => {\n    console.log(favFilms); // Find the film id to decide add or remove\n\n    if (favFilms.find(id => id === idAddOrRemove)) {\n      setFavFilms(favFilms.filter(filmId => filmId.id !== idAddOrRemove));\n    } else {\n      setFavFilms(favFilms => [...favFilms, {\n        id: idAddOrRemove,\n        index: indexAddOrRemove\n      }]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"FilmLibrary\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"film-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"section-title\",\n        children: \"FILMS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"film-list-filters\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectAllView ? 'film-list-filter is-active' : 'film-list-filter',\n          onClick: () => setSelectAllView(true),\n          children: [\"ALL\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"section-count\",\n            children: TMDB.films.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectAllView ? 'film-list-filter' : 'film-list-filter is-active',\n          onClick: () => setSelectAllView(false),\n          children: [\"FAVES\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"section-count\",\n            children: favFilms.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), selectAllView ? TMDB.films.map((film, index) => /*#__PURE__*/_jsxDEV(FilmRow, {\n        id: film.id,\n        imgURL: film.poster_path,\n        title: film.title,\n        year: new Date(film.release_date).getFullYear(),\n        handleSelectFilm: () => setSelectedFilm(TMDB.films[index]),\n        handleAddOrRemoveFavFilm: () => handleAddOrRemoveFavFilm(film.id, index),\n        isInFavFilms: favFilms.find(favFilm => favFilm.id === film.id)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }, this)) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"film-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"section-title\",\n        children: selectedFilm.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilmDetail, {\n        title: selectedFilm.title,\n        overview: selectedFilm.overview,\n        poster_path: selectedFilm.poster_path,\n        backdrop_path: selectedFilm.backdrop_path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FilmLibrary, \"vUyg0xq2W3Ddwm1NQUjlyTZysms=\");\n\n_c = FilmLibrary;\nexport default FilmLibrary;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilmLibrary\");","map":{"version":3,"names":["useState","FilmDetail","FilmRow","TMDB","FilmLibrary","selectedFilm","setSelectedFilm","films","favFilms","setFavFilms","selectAllView","setSelectAllView","handleAddOrRemoveFavFilm","idAddOrRemove","indexAddOrRemove","console","log","find","id","filter","filmId","index","length","map","film","poster_path","title","Date","release_date","getFullYear","favFilm","overview","backdrop_path"],"sources":["/home/julio/ReactProjects/assignment03-film-project-p1/src/FilmLibrary.js"],"sourcesContent":["import { useState } from \"react\";\nimport FilmDetail from \"./FilmDetail\";\nimport './FilmLibrary.css';\nimport FilmRow from \"./FilmRow\";\nimport TMDB from \"./TMDB\";\n\nfunction FilmLibrary() {\n  \n  const [selectedFilm, setSelectedFilm] = useState(TMDB.films[0])\n  const [favFilms, setFavFilms] =  useState([])\n  const [selectAllView, setSelectAllView] = useState(true)\n\n  const handleAddOrRemoveFavFilm = (idAddOrRemove, indexAddOrRemove) => {\n    \n    console.log(favFilms)\n\n    // Find the film id to decide add or remove\n    if (favFilms.find((id)=> id === idAddOrRemove)) {\n      setFavFilms(favFilms.filter((filmId) => filmId.id !== idAddOrRemove))\n    } else {\n      setFavFilms(favFilms=>[...favFilms,{id: idAddOrRemove, index: indexAddOrRemove}])\n    }    \n  }\n  return (\n    <div className=\"FilmLibrary\">\n      <div className=\"film-list\">\n        <h1 className=\"section-title\">FILMS</h1>\n        <div className=\"film-list-filters\">\n          <button className={selectAllView ? 'film-list-filter is-active' : 'film-list-filter'}\n                  onClick={()=>setSelectAllView(true)}\n          >\n            ALL\n            <span className=\"section-count\">{TMDB.films.length}</span>\n          </button>\n          <button className={selectAllView ? 'film-list-filter' : 'film-list-filter is-active'}\n                  onClick={()=>setSelectAllView(false)}\n          >\n            FAVES\n            <span className=\"section-count\">{favFilms.length}</span>\n          </button>\n        </div>\n        { selectAllView\n          ?\n            TMDB.films.map((film, index) =>          \n              <FilmRow key={index}\n                  id={film.id}\n                  imgURL={film.poster_path}\n                  title={film.title}\n                  year={new Date(film.release_date).getFullYear()}\n                  handleSelectFilm={()=>setSelectedFilm(TMDB.films[index])}\n                  handleAddOrRemoveFavFilm={()=>handleAddOrRemoveFavFilm(film.id, index)}\n                  isInFavFilms={favFilms.find((favFilm)=> favFilm.id === film.id)}\n              />\n            )\n          :\n          null\n        }\n        \n      </div>\n\n      <div className=\"film-details\">\n        <h1 className=\"section-title\">{selectedFilm.title}</h1>\n        <FilmDetail\n            title={selectedFilm.title}\n            overview={selectedFilm.overview}\n            poster_path={selectedFilm.poster_path}\n            backdrop_path={selectedFilm.backdrop_path}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default FilmLibrary"],"mappings":"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"},"metadata":{},"sourceType":"module"}