{"ast":null,"code":"var _jsxFileName = \"/home/julio/ReactProjects/assignment03-film-project-p1/src/FilmLibrary.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport FilmDetail from \"./FilmDetail\";\nimport './FilmLibrary.css';\nimport FilmRow from \"./FilmRow\";\nimport TMDB from \"./TMDB\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FilmLibrary() {\n  _s();\n\n  const [selectedFilm, setSelectedFilm] = useState(null);\n  const [favFilms, setFavFilms] = useState([]);\n  const [selectAllView, setSelectAllView] = useState(true);\n\n  const handleAddOrRemoveFavFilm = (idAddOrRemove, indexAddOrRemove) => {\n    // Find the film id to decide add or remove\n    if (favFilms.length > 0 && favFilms.find(favFilm => favFilm.id === idAddOrRemove)) {\n      setFavFilms(favFilms.filter(favFilm => favFilm.id !== idAddOrRemove));\n    } else {\n      setFavFilms(favFilms => [...favFilms, {\n        id: idAddOrRemove,\n        index: indexAddOrRemove\n      }]);\n    }\n  };\n\n  const handleChangeFilmView = isAll => {\n    //Only change if user clicks on different category view\n    if (selectAllView !== isAll) {\n      setSelectAllView(isAll);\n      setSelectedFilm(null);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"FilmLibrary\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"film-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"section-title\",\n        children: \"FILMS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"film-list-filters\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectAllView ? 'film-list-filter is-active' : 'film-list-filter',\n          onClick: () => handleChangeFilmView(true),\n          children: [\"ALL\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"section-count\",\n            children: TMDB.films.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: selectAllView ? 'film-list-filter' : 'film-list-filter is-active',\n          onClick: () => handleChangeFilmView(false),\n          children: [\"FAVES\", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"section-count\",\n            children: favFilms.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), selectAllView ? TMDB.films.map((film, index) => /*#__PURE__*/_jsxDEV(FilmRow, {\n        imgURL: film.poster_path,\n        title: film.title,\n        year: new Date(film.release_date).getFullYear(),\n        handleSelectFilm: () => setSelectedFilm(TMDB.films[index]),\n        handleAddOrRemoveFavFilm: () => handleAddOrRemoveFavFilm(film.id, index),\n        isInFavFilms: favFilms.find(favFilm => favFilm.id === film.id)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this)) : favFilms.map((favFilm, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"TMDB.films.filter(film) => film.id === favFilm.id)\", /*#__PURE__*/_jsxDEV(FilmRow, {\n          imgURL: TMDB.films[favFilm.index].poster_path,\n          title: TMDB.films[favFilm.index].title,\n          year: new Date(TMDB.films[favFilm.index].release_date).getFullYear(),\n          handleSelectFilm: () => setSelectedFilm(TMDB.films[index]),\n          handleAddOrRemoveFavFilm: () => handleAddOrRemoveFavFilm(TMDB.films[favFilm.index].id, index),\n          isInFavFilms: true\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"film-details\",\n      children: selectedFilm === null ? /*#__PURE__*/_jsxDEV(FilmDetail, {\n        filmDetailEmpty: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"section-title\",\n          children: selectedFilm.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FilmDetail, {\n          filmDetailEmpty: false,\n          title: selectedFilm.title,\n          overview: selectedFilm.overview,\n          poster_path: selectedFilm.poster_path,\n          backdrop_path: selectedFilm.backdrop_path\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FilmLibrary, \"i9Hki59ETh2SXOIZHPEBJrn4QYk=\");\n\n_c = FilmLibrary;\nexport default FilmLibrary;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilmLibrary\");","map":{"version":3,"names":["useState","FilmDetail","FilmRow","TMDB","FilmLibrary","selectedFilm","setSelectedFilm","favFilms","setFavFilms","selectAllView","setSelectAllView","handleAddOrRemoveFavFilm","idAddOrRemove","indexAddOrRemove","length","find","favFilm","id","filter","index","handleChangeFilmView","isAll","films","map","film","poster_path","title","Date","release_date","getFullYear","overview","backdrop_path"],"sources":["/home/julio/ReactProjects/assignment03-film-project-p1/src/FilmLibrary.js"],"sourcesContent":["import { useState } from \"react\";\nimport FilmDetail from \"./FilmDetail\";\nimport './FilmLibrary.css';\nimport FilmRow from \"./FilmRow\";\nimport TMDB from \"./TMDB\";\n\nfunction FilmLibrary() {\n  \n  const [selectedFilm, setSelectedFilm] = useState(null)\n  const [favFilms, setFavFilms] =  useState([])\n  const [selectAllView, setSelectAllView] = useState(true)\n\n  const handleAddOrRemoveFavFilm = (idAddOrRemove, indexAddOrRemove) => {\n\n    // Find the film id to decide add or remove\n    if (favFilms.length > 0 && favFilms.find((favFilm)=> favFilm.id === idAddOrRemove)) {\n      setFavFilms(favFilms.filter((favFilm) => favFilm.id !== idAddOrRemove))\n    } else {\n      setFavFilms(favFilms=>[...favFilms,{id: idAddOrRemove, index: indexAddOrRemove}])\n    }\n\n  }\n\n  const handleChangeFilmView = isAll => {\n\n    //Only change if user clicks on different category view\n    if (selectAllView !== isAll) {\n      setSelectAllView(isAll)\n      setSelectedFilm(null)\n    }    \n  }\n\n  return (\n    <div className=\"FilmLibrary\">\n      <div className=\"film-list\">\n        <h1 className=\"section-title\">FILMS</h1>\n        <div className=\"film-list-filters\">\n          <button className={selectAllView ? 'film-list-filter is-active' : 'film-list-filter'}\n                  onClick={()=>handleChangeFilmView(true)}\n          >\n            ALL\n            <span className=\"section-count\">{TMDB.films.length}</span>\n          </button>\n          <button className={selectAllView ? 'film-list-filter' : 'film-list-filter is-active'}\n                  onClick={()=>handleChangeFilmView(false)}\n          >\n            FAVES\n            <span className=\"section-count\">{favFilms.length}</span>\n          </button>\n        </div>\n        { selectAllView\n          ?\n            TMDB.films.map((film, index) =>          \n              <FilmRow key={index}                  \n                  imgURL={film.poster_path}\n                  title={film.title}\n                  year={new Date(film.release_date).getFullYear()}\n                  handleSelectFilm={()=>setSelectedFilm(TMDB.films[index])}\n                  handleAddOrRemoveFavFilm={()=>handleAddOrRemoveFavFilm(film.id, index)}\n                  isInFavFilms={favFilms.find((favFilm)=> favFilm.id === film.id)}\n              />\n            )\n          :\n          favFilms.map((favFilm, index) => <>TMDB.films.filter(film) => film.id === favFilm.id)\n            <FilmRow key={index}              \n              imgURL={TMDB.films[favFilm.index].poster_path}\n              title={TMDB.films[favFilm.index].title}\n              year={new Date(TMDB.films[favFilm.index].release_date).getFullYear()}\n              handleSelectFilm={()=>setSelectedFilm(TMDB.films[index])}\n              handleAddOrRemoveFavFilm={()=>handleAddOrRemoveFavFilm(TMDB.films[favFilm.index].id, index)}\n              isInFavFilms={true}\n            />\n            </>\n          )\n      \n        }\n        \n      </div>\n\n      <div className=\"film-details\">\n        \n        { selectedFilm === null\n          ?\n            <FilmDetail filmDetailEmpty={true} />\n          :\n          <>\n            <h1 className=\"section-title\">{selectedFilm.title}</h1>\n            <FilmDetail\n              filmDetailEmpty={false}\n              title={selectedFilm.title}\n              overview={selectedFilm.overview}\n              poster_path={selectedFilm.poster_path}\n              backdrop_path={selectedFilm.backdrop_path}\n            />\n          </>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default FilmLibrary"],"mappings":"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"},"metadata":{},"sourceType":"module"}